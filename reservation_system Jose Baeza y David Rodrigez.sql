
--database script
create database reservation_system;
use reservation_system;

create table clients (
    clientid tinyint primary key identity,
    firstname varchar(30) not null,
    lastname varchar(60) not null,
    email varchar(50) not null unique,
    phone varchar(9) not null,
    check (email like '__%@__%.__%'),
    check (phone like '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]')
);

create table employees (
    employeeid tinyint primary key identity,
    name varchar(30) not null,
    specialty varchar(30) not null,
    phone varchar(9) not null,
    availability varchar(255) not null,
    check (phone like '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]')
);

create table service_categories (
    categoryid tinyint primary key identity,
    name char(30) not null,
    description varchar(255) not null
);
create table service (
    serviceid tinyint primary key identity,
    servicesname varchar(30) not null,
	categoryid tinyint not null,
    description varchar(255) not null,
    duration int not null,
    price smallmoney not null,
	foreign key (categoryid) references service_categories(categoryid)
);

create table reservations (
    reservationid tinyint primary key identity,
    reservationdate date not null,
    reservationtime time not null,
    clientid tinyint not null,
    employeeid tinyint not null,
    status varchar(50) not null,
    foreign key (clientid) references clients(clientid),
    foreign key (employeeid) references employees(employeeid)
);

create table reservation_details (
    detailid tinyint primary key identity,
    reservationid tinyint not null,
    serviceid tinyint not null,
    quantity tinyint not null default 1,
    foreign key (reservationid) references reservations(reservationid),
    foreign key (serviceid) references service(serviceid)
);

create table payments (
    paymentid tinyint primary key identity,
    reservationid tinyint not null unique,
    amount decimal(10,2) not null,
    paymentdate date not null,
    paymentmethod varchar(50) not null,
    foreign key (reservationid) references reservations(reservationid)
);

create table schedules (
    scheduleid tinyint primary key identity,
    employeeid tinyint not null,
    day varchar(20) not null, 
    starttime time not null,
    endtime time not null,
    foreign key (employeeid) references employees(employeeid)
);


--sql Query questions 
--1º Retrieve all confirmed reservations with client details.
select r.reservationid, r.reservationdate, r.reservationtime, c.firstname, c.lastname, r.status
from reservations r
join clients c ON r.clientid = c.clientid
where r.status = 'confirmed';

--2º Find the total revenue generated by each service.
select s.servicesname, sum(rd.quantity * s.price) as total_revenue
from reservation_details rd
join service s on rd.serviceid = s.serviceid
group by s.servicesname;

--3º List employees and their schedules.
select e.name, sc.day, sc.starttime, sc.endtime
from employees e
join schedules sc on e.employeeid = sc.employeeid
order by e.name, sc.day;

--4º List of clients with their reservations and the total paid
select c.firstname as client_firstname, c.lastname as client_lastname, r.reservationid, r.reservationdate, r.reservationtime, r.status, p.amount as total_paid, p.paymentmethod
from clients c
join reservations r on c.clientid = r.clientid
join payments p on r.reservationid = p.reservationid
order by c.lastname, c.firstname, r.reservationdate;


--5º Find services provided in a specific reservation.
select r.reservationid, s.servicesname, rd.quantity, s.price
from reservation_details rd
join service s on rd.serviceid = s.serviceid
join reservations r on rd.reservationid = r.reservationid
where r.reservationid = 1; 

